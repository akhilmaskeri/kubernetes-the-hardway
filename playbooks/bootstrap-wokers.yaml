-
    hosts: worker
    gather_facts: False

    tasks:
        - name: install worker dependencies
          become: True
          package:
            name: "{{item}}"
            update_cache: True
            state: latest
          with_items:
            - socat
            - conntrack
            - ipset

        - name: disable swap
          become: True
          shell: swapoff -a

        - name: "get pod CIDR"
          shell: "curl -s -H \"Metadata-Flavor: Google\" http://metadata.google.internal/computeMetadata/v1/instance/attributes/pod-cidr"
          register: pod_cidr

        - name: create /opt/cni/bin & net.d
          become: True
          file:
            path: "{{item}}"
            state: directory
          with_items:
            - /opt/cni/bin
            - /etc/cni/net.d

        - name: create bridge network config file
          become: True
          copy:
            dest: /etc/cni/net.d/10-bridge.conf
            content: |
              {
                  "cniVersion": "0.4.0",
                  "name": "bridge",
                  "type": "bridge",
                  "bridge": "cnio0",
                  "isGateway": true,
                  "ipMasq": true,
                  "ipam": {
                      "type": "host-local",
                      "ranges": [
                        [{"subnet": "{{pod_cidr.stdout}}"}]
                      ],
                      "routes": [{"dst": "0.0.0.0/0"}]
                  }
              }

        - name: write loopback config file
          become: True
          copy:
            dest: /etc/cni/net.d/99-loopback.conf
            content: |
              {
                  "cniVersion": "0.4.0",
                  "name": "lo",
                  "type": "loopback"
              }

        - name: download and unarchive crictl
          become: True
          unarchive:
            src: https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.21.0/crictl-v1.21.0-linux-amd64.tar.gz 
            dest: /usr/local/bin
            mode: +x
            remote_src: True

        - name: download and install runc
          become: True
          get_url: 
            url: https://github.com/opencontainers/runc/releases/download/v1.0.0-rc93/runc.amd64
            dest: /usr/local/bin/runc
            mode: +x


        - name: download and install cni-plugins
          become: True
          unarchive:
            src: https://github.com/containernetworking/plugins/releases/download/v0.9.1/cni-plugins-linux-amd64-v0.9.1.tgz 
            dest: /opt/cni/bin/
            remote_src: True


        - name: create containerd directory
          become: True
          file:
            path: "{{item}}"
            state: directory
          with_items:
            - ~/containerd/
            - /etc/containerd

        - name: download and install containerd
          become: True
          unarchive:
            src: https://github.com/containerd/containerd/releases/download/v1.4.4/containerd-1.4.4-linux-amd64.tar.gz
            dest: ~/containerd/
            remote_src: True

        - name: move containerd/bin to bin
          become: True
          shell: mv ~/containerd/bin/* /bin/

        - name: create containerd config
          become: True
          copy:
            dest: /etc/containerd/config.toml
            content: |
              [plugins]
                [plugins.cri.containerd]
                  snapshotter = "overlayfs"
                  [plugins.cri.containerd.default_runtime]
                    runtime_type = "io.containerd.runtime.v1.linux"
                    runtime_engine = "/usr/local/bin/runc"
                    runtime_root = ""

        - name: containerd service
          become: True
          copy:
            dest: /etc/systemd/system/containerd.service
            content: |
              [Unit]
              Description=containerd container runtime
              Documentation=https://containerd.io
              After=network.target

              [Service]
              ExecStartPre=/sbin/modprobe overlay
              ExecStart=/bin/containerd
              Restart=always
              RestartSec=5
              Delegate=yes
              KillMode=process
              OOMScoreAdjust=-999
              LimitNOFILE=1048576
              LimitNPROC=infinity
              LimitCORE=infinity

              [Install]
              WantedBy=multi-user.target

        - name: make kubelet directories
          become: True
          file:
            path: "{{item}}"
            state: directory
          with_items:
            - /var/lib/kubelet/
            - /var/lib/kubernetes/

        - name: get host name
          shell: hostname -s
          register: hostname

        - name: move host files
          become: True
          shell: mv {{hostname.stdout}}-key.pem {{hostname.stdout}}.pem /var/lib/kubelet/

        - name: move kubeconfg files
          become: True
          shell: mv {{hostname.stdout}}.kubeconfig /var/lib/kubelet/kubeconfig

        - name: move ca 
          become: True
          shell: mv ca.pem /var/lib/kubernetes/

        - name: create kubelet-config.yaml
          become: True
          copy:
            dest: /var/lib/kubelet/kubelet-config.yaml
            content: |
              kind: KubeletConfiguration
              apiVersion: kubelet.config.k8s.io/v1beta1
              authentication:
                anonymous:
                  enabled: false
                webhook:
                  enabled: true
                x509:
                  clientCAFile: "/var/lib/kubernetes/ca.pem"
              authorization:
                mode: Webhook
              clusterDomain: "cluster.local"
              clusterDNS:
                - "10.32.0.10"
              podCIDR: "{{pod_cidr.stdout}}"
              resolvConf: "/run/systemd/resolve/resolv.conf"
              runtimeRequestTimeout: "15m"
              tlsCertFile: "/var/lib/kubelet/{{hostname.stdout}}.pem"
              tlsPrivateKeyFile: "/var/lib/kubelet/{{hostname.stdout}}-key.pem"

        - name: create kubelet.service
          become: True
          copy:
            dest: /etc/systemd/system/kubelet.service
            content: |
              [Unit]
              Description=Kubernetes Kubelet
              Documentation=https://github.com/kubernetes/kubernetes
              After=containerd.service
              Requires=containerd.service

              [Service]
              ExecStart=/usr/local/bin/kubelet \\
                --config=/var/lib/kubelet/kubelet-config.yaml \\
                --container-runtime=remote \\
                --container-runtime-endpoint=unix:///var/run/containerd/containerd.sock \\
                --image-pull-progress-deadline=2m \\
                --kubeconfig=/var/lib/kubelet/kubeconfig \\
                --network-plugin=cni \\
                --register-node=true \\
                --v=2
              Restart=on-failure
              RestartSec=5

              [Install]
              WantedBy=multi-user.target

        - name: create /var/lib/kube-proxy/
          become: True 
          file:
            path: /var/lib/kube-proxy/
            state: directory

        - name: config kube proxy
          become: True
          shell: mv kube-proxy.kubeconfig /var/lib/kube-proxy/kubeconfig

        - name: create kube-proxy-config.yaml
          become: True
          copy:
            dest: /var/lib/kube-proxy/kube-proxy-config.yaml
            content: |
              kind: KubeProxyConfiguration
              apiVersion: kubeproxy.config.k8s.io/v1alpha1
              clientConnection:
                kubeconfig: "/var/lib/kube-proxy/kubeconfig"
              mode: "iptables"
              clusterCIDR: "10.200.0.0/16"
        
        - name: create kube-proxy.service
          become: True
          copy: 
            dest: /etc/systemd/system/kube-proxy.service
            content: |
              [Unit]
              Description=Kubernetes Kube Proxy
              Documentation=https://github.com/kubernetes/kubernetes

              [Service]
              ExecStart=/usr/local/bin/kube-proxy \\
                --config=/var/lib/kube-proxy/kube-proxy-config.yaml
              Restart=on-failure
              RestartSec=5

              [Install]
              WantedBy=multi-user.target


        - name: start services
          become: True
          systemd:
              name: "{{item}}"
              enabled: yes
              daemon_reload: yes
              state: started

          with_items:
            - containerd
            - kubelet
            - kube-proxy

          