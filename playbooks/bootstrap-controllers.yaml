-
    hosts: controller
    gather_facts: False

    tasks:

        - name: "Get kubernetes Public Address"
          shell: gcloud compute addresses describe k8-the-hard-way-lb-ip --format 'value(address)'
          register: kubernetes_public_address
          run_once: true
          delegate_to: localhost

        - name: Create kubernetes config directory
          become: True
          become_user: root
          file:
            path: "{{item}}"
            state: directory
          with_items:
            - /etc/kubernetes/config
            - /var/lib/kubernetes/

        - name: Download kubernetes controll binaries
          become: True
          get_url:
              url: "{{item}}"
              dest: ~/
              mode: +x
          with_items:
            - https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kube-apiserver
            - https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kube-controller-manager
            - https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kube-scheduler
            - https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubectl

        - name: Move binaries to usr/local/bin
          become: True
          shell: mv /root/"{{item}}" /usr/local/bin
          with_items:
            - kube-apiserver 
            - kube-controller-manager
            - kube-scheduler
            - kubectl

        - name: Move pem keys
          become: True
          copy:
            src: "{{item}}"
            dest: /var/lib/kubernetes/
            remote_src: True
          with_items:
            - ca.pem 
            - ca-key.pem 
            - kubernetes-key.pem 
            - kubernetes.pem
            - service-account-key.pem
            - service-account.pem
            - encryption-config.yaml

        - name: "Get Internal IP"
          shell: "curl -s -H \"Metadata-Flavor: Google\" http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip"
          register: internal_ip

        - name: "Get Region"
          shell: "curl -s -H \"Metadata-Flavor: Google\" http://metadata.google.internal/computeMetadata/v1/project/attributes/google-compute-default-region"
          register: region

        - name: "Create kube-apiserver.service file"
          become: True
          copy:
            dest: /etc/systemd/system/kube-apiserver.service
            content: |
                [Unit]
                Description=Kubernetes API Server
                Documentation=https://github.com/kubernetes/kubernetes

                [Service]
                ExecStart=/usr/local/bin/kube-apiserver \
                    --advertise-address={{internal_ip.stdout}} \
                    --allow-privileged=true \
                    --apiserver-count=3 \
                    --audit-log-maxage=30 \
                    --audit-log-maxbackup=3 \
                    --audit-log-maxsize=100 \
                    --audit-log-path=/var/log/audit.log \
                    --authorization-mode=Node,RBAC \
                    --bind-address=0.0.0.0 \
                    --client-ca-file=/var/lib/kubernetes/ca.pem \
                    --enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \
                    --etcd-cafile=/var/lib/kubernetes/ca.pem \
                    --etcd-certfile=/var/lib/kubernetes/kubernetes.pem \
                    --etcd-keyfile=/var/lib/kubernetes/kubernetes-key.pem \
                    --etcd-servers=https://10.240.0.10:2379,https://10.240.0.11:2379 \
                    --event-ttl=1h \
                    --encryption-provider-config=/var/lib/kubernetes/encryption-config.yaml \
                    --kubelet-certificate-authority=/var/lib/kubernetes/ca.pem \
                    --kubelet-client-certificate=/var/lib/kubernetes/kubernetes.pem \
                    --kubelet-client-key=/var/lib/kubernetes/kubernetes-key.pem \
                    --runtime-config='api/all=true' \
                    --service-account-key-file=/var/lib/kubernetes/service-account.pem \
                    --service-account-signing-key-file=/var/lib/kubernetes/service-account-key.pem \
                    --service-account-issuer=https://{{kubernetes_public_address.stdout}}:6443 \
                    --service-cluster-ip-range=10.32.0.0/24 \
                    --service-node-port-range=30000-32767 \
                    --tls-cert-file=/var/lib/kubernetes/kubernetes.pem \
                    --tls-private-key-file=/var/lib/kubernetes/kubernetes-key.pem \
                    --v=2
                Restart=on-failure
                RestartSec=5

                [Install]
                WantedBy=multi-user.target
                EOF

        - name: "copy kubeconfigs"
          become: True
          copy:
            src: "/home/{{ansible_user}}/{{item}}"
            dest: "/var/lib/kubernetes/"
            remote_src: True
          with_items: 
            - kube-controller-manager.kubeconfig
            - kube-scheduler.kubeconfig

        - name: "Create kube-controller-manager.service file"
          become: True
          become_user: root
          copy:
            dest: /etc/systemd/system/kube-controller-manager.service
            content: |
                [Unit]
                Description=Kubernetes Controller Manager
                Documentation=https://github.com/kubernetes/kubernetes

                [Service]
                ExecStart=/usr/local/bin/kube-controller-manager \
                    --bind-address=0.0.0.0 \
                    --cluster-cidr=10.200.0.0/16 \
                    --cluster-name=kubernetes \
                    --cluster-signing-cert-file=/var/lib/kubernetes/ca.pem \
                    --cluster-signing-key-file=/var/lib/kubernetes/ca-key.pem \
                    --kubeconfig=/var/lib/kubernetes/kube-controller-manager.kubeconfig \
                    --leader-elect=true \
                    --root-ca-file=/var/lib/kubernetes/ca.pem \
                    --service-account-private-key-file=/var/lib/kubernetes/service-account-key.pem \
                    --service-cluster-ip-range=10.32.0.0/24 \
                    --use-service-account-credentials=true \
                    --v=2
                Restart=on-failure
                RestartSec=5

                [Install]
                WantedBy=multi-user.target

        - name: "Crate kube-scheduler.yaml file"
          become: True
          become_user: root
          copy:
            dest: /etc/kubernetes/config/kube-scheduler.yaml
            content: |
                apiVersion: kubescheduler.config.k8s.io/v1beta1
                kind: KubeSchedulerConfiguration
                clientConnection:
                    kubeconfig: "/var/lib/kubernetes/kube-scheduler.kubeconfig"
                leaderElection:
                    leaderElect: true

        - name: "Create kube-scheduler.service file"
          become: True
          become_user: root
          copy:
            dest: /etc/systemd/system/kube-scheduler.service
            content: |
                [Unit]
                Description=Kubernetes Scheduler
                Documentation=https://github.com/kubernetes/kubernetes

                [Service]
                ExecStart=/usr/local/bin/kube-scheduler \
                    --config=/etc/kubernetes/config/kube-scheduler.yaml \
                    --v=2
                Restart=on-failure
                RestartSec=5

                [Install]
                WantedBy=multi-user.target
          
        - name: "Enable and start etcd"
          become: True
          become_user: root
          systemd:
               name: "{{item}}"
               enabled: yes
               daemon_reload: yes
               state: started
          with_items:
            - kube-apiserver 
            - kube-controller-manager 
            - kube-scheduler

        - name: Install nginx
          become: True
          package:
            name: nginx
            update_cache: True
            state: latest

        - name: Create healthz route
          become: True
          copy:
            dest: /etc/nginx/sites-available/kubernetes.default.svc.cluster.local
            content: |
                server {
                    listen 80;
                    server_name kubernetes.default.svc.cluster.local;

                    location /healthz {
                        proxy_pass https://127.0.0.1:6443/healthz;
                        proxy_ssl_trusted_certificate /var/lib/kubernetes/ca.pem;
                    }
                }

        - name: link nginx config file to /etc/nginx/sites-enabled/
          become: True
          file:
            src: "/etc/nginx/sites-available/kubernetes.default.svc.cluster.local"
            dest: "/etc/nginx/sites-enabled/kubernetes.default.svc.cluster.local"
            state: link

        - name: start nginx
          become: True
          systemd:
            name: nginx
            enabled: yes
            daemon_reload: yes
            state: restarted
        
        - name: rbac for kubelet authorisation
          run_once: True
          become: True
          copy:
            dest: rbac-cluster-role.yaml
            content: |
              apiVersion: rbac.authorization.k8s.io/v1
              kind: ClusterRole
              metadata:
                annotations:
                  rbac.authorization.kubernetes.io/autoupdate: "true"
                labels:
                  kubernetes.io/bootstrapping: rbac-defaults
                name: system:kube-apiserver-to-kubelet
              rules:
                - apiGroups:
                    - ""
                  resources:
                    - nodes/proxy
                    - nodes/stats
                    - nodes/log
                    - nodes/spec
                    - nodes/metrics
                  verbs:
                    - "*"

        - name: apply rbac config
          run_once: True
          become: True
          shell: kubectl apply --kubeconfig admin.kubeconfig -f rbac-cluster-role.yaml
            

        - name: bind cluster role
          run_once: True
          become: True
          copy: 
            dest: rbac-cluster-role-binding.yaml
            content: |
              apiVersion: rbac.authorization.k8s.io/v1
              kind: ClusterRoleBinding
              metadata:
                name: system:kube-apiserver
                namespace: ""
              roleRef:
                apiGroup: rbac.authorization.k8s.io
                kind: ClusterRole
                name: system:kube-apiserver-to-kubelet
              subjects:
                - apiGroup: rbac.authorization.k8s.io
                  kind: User
                  name: kubernetes

        - name: apply cluster role binding
          run_once: True
          become: True
          shell: kubectl apply --kubeconfig admin.kubeconfig -f rbac-cluster-role-binding.yaml
